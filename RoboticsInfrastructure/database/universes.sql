--
-- PostgreSQL database dump
--

-- Dumped from database version 17.0 (Debian 17.0-1.pgdg120+1)
-- Dumped by pg_dump version 17.0 (Debian 17.0-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET transaction_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: universes; Type: TABLE; Schema: public; Owner: user-dev
--

CREATE TABLE public.universes (
	id bigint NOT NULL,
	name character varying(100) NOT NULL,
	world_id bigint NOT NULL,
	robot_id bigint NOT NULL
);


ALTER TABLE public.universes OWNER TO "user-dev";

--
-- Name: exercises_universe_id_seq; Type: SEQUENCE; Schema: public; Owner: user-dev
--

ALTER TABLE public.universes ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
	SEQUENCE NAME public.exercises_universe_id_seq
	START WITH 1
	INCREMENT BY 1
	NO MINVALUE
	NO MAXVALUE
	CACHE 1
);


--
-- Name: worlds; Type: TABLE; Schema: public; Owner: user-dev
--

CREATE TABLE public.worlds (
	id bigint NOT NULL,
	name character varying(100) NOT NULL,
	launch_file_path character varying(200) NOT NULL,
	tools_config character varying(200) NOT NULL,
	ros_version character varying(4) NOT NULL,
	type character varying(50) NOT NULL,
	start_pose real[6] NOT NULL
);

--
-- start_pose is '{X,Y,Z,Roll,Pitch,Yaw}'
--

ALTER TABLE public.worlds OWNER TO "user-dev";

--
-- Name: worlds_id_seq; Type: SEQUENCE; Schema: public; Owner: user-dev
--

ALTER TABLE public.worlds ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
	SEQUENCE NAME public.worlds_id_seq
	START WITH 0
	INCREMENT BY 1
	MINVALUE 0
	NO MAXVALUE
	CACHE 1
);

--
-- Name: robots; Type: TABLE; Schema: public; Owner: user-dev
--

CREATE TABLE public.robots (
	id bigint NOT NULL,
	name character varying(100) NOT NULL,
	launch_file_path character varying(200) NOT NULL
);


ALTER TABLE public.robots OWNER TO "user-dev";

--
-- Name: robots_id_seq; Type: SEQUENCE; Schema: public; Owner: user-dev
--

ALTER TABLE public.robots ALTER COLUMN id ADD GENERATED BY DEFAULT AS IDENTITY (
	SEQUENCE NAME public.robots_id_seq
	START WITH 0
	INCREMENT BY 1
	MINVALUE 0
	NO MAXVALUE
	CACHE 1
);

--
-- Name: tools; Type: TABLE; Schema: public; Owner: user-dev
--

CREATE TABLE public.tools (
	name character varying(50) NOT NULL PRIMARY KEY,
	base_config character varying(200) NOT NULL
);


ALTER TABLE public.tools OWNER TO "user-dev";

--
-- Data for Name: universes; Type: TABLE DATA; Schema: public; Owner: user-dev
--

COPY public.universes (id, name, world_id, robot_id) FROM stdin;
1	Vacuums House	24	0
2	City Large	8	0
3	Rescue Default	20	0
4	Warehouse 1	27	0
5	Simple Circuit	23	0
6	Montreal Circuit	16	0
7	Follow Person	10	0
8	Follow Person Teleop	11	0
9	Autoparking Simple: In line	7	0
10	Obstacle Avoidance Default	19	0
11 	City Large Followcam	9	0
12 	3d Reconstruction	1	0
13 	Autoparking Simple: In battery	6	0
14 	Autoparking Gas Station: In line	3	0
15 	Autoparking Gas Station: In battery	2	0
16 	Autoparking Gas Station: Parking lot	4	0
17 	Warehouse 1 Ackermann	28	0
18 	Warehouse 2 Ackermann	30	0
19	Warehouse 2	29	0
20 	Montmelo Circuit	14	0
21 	Nurburgring Circuit	18	0
22 	Nurburgring Ackermann Circuit	17	0
23 	Montmelo Ackermann Circuit	13	0
24 	Montreal Ackermann Circuit	15	0
25 	Simple Ackermann Circuit	22	0
26	Autoparking Lidar Simple: In line	5	0
27	Vacuums House Roof	26	0
28	Restaurant	21	0
29	Vacuums House Markers	25	0
30	Small Laser Mapping Warehouse	33	0
31	Rescue People Harmonic	31	0
32	Follow Road Harmonic	32	0
33	Laser Mapping Warehouse	12	0
34	Pick And Place World	34	0
35	Car Junction World	35	0
\.


--
-- Data for Name: worlds; Type: TABLE DATA; Schema: public; Owner: user-dev
--


COPY public.worlds (id, name, launch_file_path, tools_config, ros_version, type, start_pose) FROM stdin;
0	None	None	None	ROS2	none	{0.0,0.0,0.0,0.0,0.0,0.0}
1	3d Reconstruction	/opt/jderobot/Launchers/3d_reconstruction.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
2	Autoparking Gas Station: In battery	/opt/jderobot/Launchers/gas_station_battery_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
3	Autoparking Gas Station: In line	/opt/jderobot/Launchers/gas_station_line_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
4	Autoparking Gas Station: Parking lot	/opt/jderobot/Launchers/gas_station_parking_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
5	Autoparking Lidar Simple: In line	/opt/jderobot/Launchers/prius_360_autoparking.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
6	Autoparking Simple: In battery	/opt/jderobot/Launchers/prius_bateria.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
7	Autoparking Simple: In line	/opt/jderobot/Launchers/prius_autoparking.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
8	City Large	/opt/jderobot/Launchers/taxi_navigator.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
9	City Large Followcam	/opt/jderobot/Launchers/taxi_navigator_followingcam.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
10	Follow Person	/opt/jderobot/Launchers/follow_person.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
11	Follow Person Teleop	/opt/jderobot/Launchers/follow_person_teleop.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
12	Laser Mapping Warehouse	/opt/jderobot/Launchers/laser_mapping.launch.py	{"gzsim":"/opt/jderobot/Launchers/visualization/laser_mapping.config"}	ROS2	gz	{0.0,0.0,0.0,0.0,0.0,0.0}
13	Montmelo Ackermann Circuit	/opt/jderobot/Launchers/montmelo_circuit_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
14	Montmelo Circuit	/opt/jderobot/Launchers/montmelo_circuit.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
15	Montreal Ackermann Circuit	/opt/jderobot/Launchers/montreal_circuit_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
16	Montreal Circuit	/opt/jderobot/Launchers/montreal_circuit.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
17	Nurburgring Ackermann Circuit	/opt/jderobot/Launchers/nurburgring_circuit_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
18	Nurburgring Circuit	/opt/jderobot/Launchers/nurburgring_circuit.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
19	Obstacle Avoidance Default	/opt/jderobot/Launchers/simple_circuit_obstacles_followingcam.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
20	Rescue Default	/opt/jderobot/Launchers/world.json	None	ROS2	drones	{0.0,0.0,0.0,0.0,0.0,0.0}
21	Restaurant	/opt/jderobot/Launchers/restaurant.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
22	Simple Ackermann Circuit	/opt/jderobot/Launchers/simple_circuit_ackermann.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
23	Simple Circuit	/opt/jderobot/Launchers/simple_circuit.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
24	Vacuums House	/opt/jderobot/Launchers/vacuum_cleaner.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
25	Vacuums House Markers	/opt/jderobot/Launchers/marker_visual_loc.launch.py	{"gzsim":"/opt/jderobot/Launchers/visualization/marker_visual_loc.config"}	ROS2	gz	{1,-1.5,0.6,0,0,0}
26	Vacuums House Roof	/opt/jderobot/Launchers/montecarlo_visual_loc.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
27	Warehouse 1	/opt/jderobot/Launchers/amazon_robot.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
28	Warehouse 1 Ackermann	/opt/jderobot/Launchers/small_warehouse_with_ackermann_logistic_robot.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
29	Warehouse 2	/opt/jderobot/Launchers/pallet_warehouse.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
30	Warehouse 2 Ackermann	/opt/jderobot/Launchers/pallet_warehouse_with_ackermann_logistic_robot.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
31	Rescue People Harmonic	/opt/jderobot/Launchers/rescue_people.launch.py	{"gzsim":"/opt/jderobot/Launchers/visualization/rescue_people.config"}	ROS2	gz	{0.0,0.0,0.0,0.0,0.0,0.0}
32	Follow Road Harmonic	/opt/jderobot/Launchers/follow_road.launch.py	{"gzsim":"/opt/jderobot/Launchers/visualization/follow_road.config"}	ROS2	gz	{0.0,0.0,0.0,0.0,0.0,0.0}
33	Small Laser Mapping Warehouse	/opt/jderobot/Launchers/small_laser_mapping.launch.py	{"gzsim":"/opt/jderobot/Launchers/visualization/small_laser_mapping.config"}	ROS2	gz	{0.0,0.0,0.0,0.0,0.0,0.0}
34	Pick And Place Arm	/home/dev_ws/src/IndustrialRobots/ros2_SimRealRobotControl/ros2srrc_launch/moveit2/moveit2.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
35	Car Junction	/opt/jderobot/Launchers/car_junction.launch.py	None	ROS2	gazebo	{0.0,0.0,0.0,0.0,0.0,0.0}
\.

--
-- Data for Name: robots; Type: TABLE DATA; Schema: public; Owner: user-dev
--

COPY public.robots (id, name, launch_file_path) FROM stdin;
0	None	None
\.
-- 1	Turtlebot 3	/opt/jderobot/Launchers/robots/turtlebot3/spawn_robot.launch.py

--
-- Data for Name: tools; Type: TABLE DATA; Schema: public; Owner: user-dev
--

COPY public.tools (name, base_config) FROM stdin;
console	None
simulator	None
web_gui	None
state_monitor	None
\.


--
-- Name: exercises_universe_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user-dev
--

SELECT pg_catalog.setval('public.exercises_universe_id_seq', 1, false);

--
-- Name: worlds_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user-dev
--

SELECT pg_catalog.setval('public.worlds_id_seq', 0, false);

--
-- Name: robots_id_seq; Type: SEQUENCE SET; Schema: public; Owner: user-dev
--

SELECT pg_catalog.setval('public.robots_id_seq', 0, false);

--
-- Name: universes exercises_universes_name_key; Type: CONSTRAINT; Schema: public; Owner: user-dev
--

ALTER TABLE ONLY public.universes
	ADD CONSTRAINT exercises_universes_name_key UNIQUE (name);


--
-- Name: universes universes_pkey; Type: CONSTRAINT; Schema: public; Owner: user-dev
--

ALTER TABLE ONLY public.universes
	ADD CONSTRAINT universes_pkey PRIMARY KEY (id);


--
-- Name: exercises_universe_name_459df99a_like; Type: INDEX; Schema: public; Owner: user-dev
--

CREATE INDEX exercises_universe_name_459df99a_like ON public.universes USING btree (name varchar_pattern_ops);

--
-- PostgreSQL database dump complete
--
