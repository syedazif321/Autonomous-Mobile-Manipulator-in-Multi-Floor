<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro" name="bcr_arm_combo">

  <!-- ==================== Mobile base ==================== -->
  <xacro:include filename="$(find bcr_bot)/urdf/bcr_bot.xacro"/>
  <!-- Set sim_gazebo true so bcr_bot loads any Gazebo bits it needs -->
  <xacro:bcr_bot wheel_odom_topic="odom" sim_gazebo="true"/>

  <!-- ==================== RM-75 arm (mountable wrapper) ====================
       Your original rm_gazebo/config/gazebo_75_description.urdf.xacro fixes the arm to 'world'.
       Below is a mountable wrapper that removes the 'world' link and instead
       attaches the arm's base_link to a parent link we choose (roof_link). -->

  <!-- Include the arm body URDF the original file references -->
  <!-- It includes rm_description/urdf/rm_75_gazebo.urdf inside -->
  <xacro:include filename="$(find rm_gazebo)/config/gazebo_75_description.urdf.xacro"/>

  <!-- Recreate the arm as a macro WITHOUT the world link/joint -->
  <xacro:macro name="rm75_arm_mountable" params="parent_link:=roof_link x:=0 y:=0 z:=0.18 r:=0 p:=0 yaw:=0">
    <!-- === Bring in the raw arm links/joints ===
         The included file already pulls rm_description/urdf/rm_75_gazebo.urdf
         and also adds ros2_control + gazebo_ros2_control plugin.
         We re-use its contents, BUT we avoid creating a 'world' link.
         To do that, we inline the key parts: include the same URDF and then
         create our own parent->base_link fixed joint. -->

    <!-- Bring in the arm (links/joints): -->
    <xacro:include filename="$(find rm_description)/urdf/rm_75_gazebo.urdf" />

    <!-- Mount the arm base onto the selected parent link -->
    <joint name="arm_mount_fixed" type="fixed">
      <parent link="${parent_link}"/>
      <child link="base_link"/>
      <origin xyz="${x} ${y} ${z}" rpy="${r} ${p} ${yaw}"/>
    </joint>

    <!-- Copy the Gazebo/ros2_control bits from your original file -->
    <gazebo reference="base_link"><gravity>false</gravity></gazebo>
    <gazebo reference="Link1"><material>Gazebo/White</material><self_collide>false</self_collide><gravity>false</gravity></gazebo>
    <gazebo reference="Link2"><material>Gazebo/White</material><gravity>false</gravity></gazebo>
    <gazebo reference="Link3"><material>Gazebo/White</material><gravity>false</gravity></gazebo>
    <gazebo reference="Link4"><material>Gazebo/White</material><gravity>false</gravity></gazebo>
    <gazebo reference="Link5"><material>Gazebo/White</material><gravity>false</gravity></gazebo>
    <gazebo reference="Link6"><material>Gazebo/White</material><gravity>false</gravity></gazebo>
    <gazebo reference="Link7"><material>Gazebo/White</material><gravity>false</gravity></gazebo>

    <gazebo><is_static>false</is_static><self_collide>true</self_collide></gazebo>

    <!-- ros2_control for the arm (as in your original) -->
    <ros2_control name="GazeboSystem" type="system">
      <hardware><plugin>gazebo_ros2_control/GazeboSystem</plugin></hardware>
      <joint name="joint1"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
      <joint name="joint2"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
      <joint name="joint3"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
      <joint name="joint4"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
      <joint name="joint5"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
      <joint name="joint6"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
      <joint name="joint7"><command_interface name="position"/>
        <state_interface name="position"><param name="initial_value">0</param></state_interface>
        <state_interface name="velocity"/></joint>
    </ros2_control>

    <!-- Gazebo ros2_control plugin -->
    <gazebo>
      <plugin filename="libgazebo_ros2_control.so" name="gazebo_ros2_control">
        <parameters>$(find rm_75_config)/config/ros2_controllers.yaml</parameters>
        <robot_param>robot_description</robot_param>
        <robot_param_node>robot_state_publisher</robot_param_node>
      </plugin>
    </gazebo>
  </xacro:macro>

  <!-- ====== Instantiate arm on top of the base roof_link ====== -->
  <!-- Adjust z (0.18) if you need more clearance -->
  <xacro:rm75_arm_mountable parent_link="roof_link" x="0" y="0" z="0.18" r="0" p="0" yaw="0"/>

  <!-- Joint State Broadcaster will publish all joints (base + arm). Base diff/twist control remains in bcr_bot. -->

</robot>
