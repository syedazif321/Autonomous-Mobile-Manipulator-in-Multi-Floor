<?xml version="1.0"?>
<robot name="diff_robot_with_platform" xmlns:xacro="http://www.ros.org/wiki/xacro">

  <!-- ===== Basic materials (optional) ===== -->
  <material name="Gray"><color rgba="0.7 0.7 0.7 1.0"/></material>
  <material name="Black"><color rgba="0.1 0.1 0.1 1.0"/></material>
  <material name="Blue"><color rgba="0.1 0.3 0.9 1.0"/></material>

  <!-- ===== Base link (chassis) ===== -->
  <link name="base_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="15.0"/>
      <inertia ixx="0.8" ixy="0.0" ixz="0.0" iyy="0.8" iyz="0.0" izz="0.8"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0.08" rpy="0 0 0"/>
      <geometry>
        <!-- Basic chassis box: LxWxH = 0.6 x 0.45 x 0.16 -->
        <box size="0.6 0.45 0.16"/>
      </geometry>
      <material name="Gray"/>
    </visual>
    <collision>
      <origin xyz="0 0 0.08" rpy="0 0 0"/>
      <geometry>
        <box size="0.6 0.45 0.16"/>
      </geometry>
    </collision>
  </link>

  <!-- ===== Wheels (differential) ===== -->
  <!-- Parameters -->
  <!-- Wheel separation: distance between wheel centers -->
  <!-- Wheel radius: radius of the wheel -->
  <!-- Adjust these if your chassis is different -->
  <!-- Using x-forward, y-left, z-up coordinate convention -->
  <!-- Wheels rotate about the Y-axis -->
  <!-- Left wheel -->
  <link name="left_wheel_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.02" ixy="0.0" ixz="0.0" iyy="0.02" iyz="0.0" izz="0.02"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="1.5707963 0 0"/>
      <geometry>
        <cylinder radius="0.06" length="0.04"/>
      </geometry>
      <material name="Black"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="1.5707963 0 0"/>
      <geometry>
        <cylinder radius="0.06" length="0.04"/>
      </geometry>
    </collision>
  </link>

  <joint name="left_wheel_joint" type="continuous">
    <!-- Place left wheel at +Y (left side), Z at wheel radius -->
    <origin xyz="0 0.20 0.06" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="left_wheel_link"/>
    <axis xyz="0 1 0"/>
    <limit velocity="100.0"/>
  </joint>

  <!-- Right wheel -->
  <link name="right_wheel_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="1.0"/>
      <inertia ixx="0.02" ixy="0.0" ixz="0.0" iyy="0.02" iyz="0.0" izz="0.02"/>
    </inertial>
    <visual>
      <origin xyz="0 0 0" rpy="1.5707963 0 0"/>
      <geometry>
        <cylinder radius="0.06" length="0.04"/>
      </geometry>
      <material name="Black"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="1.5707963 0 0"/>
      <geometry>
        <cylinder radius="0.06" length="0.04"/>
      </geometry>
    </collision>
  </link>

  <joint name="right_wheel_joint" type="continuous">
    <!-- Place right wheel at -Y (right side), Z at wheel radius -->
    <origin xyz="0 -0.20 0.06" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="right_wheel_link"/>
    <axis xyz="0 1 0"/>
    <limit velocity="100.0"/>
  </joint>

  <!-- ===== Castor (optional) to stabilize â€“ simple sphere contact ===== -->
  <link name="caster_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.2"/>
      <inertia ixx="0.001" ixy="0.0" ixz="0.0" iyy="0.001" iyz="0.0" izz="0.001"/>
    </inertial>
    <visual>
      <origin xyz="-0.25 0 0.03" rpy="0 0 0"/>
      <geometry><sphere radius="0.03"/></geometry>
      <material name="Black"/>
    </visual>
    <collision>
      <origin xyz="-0.25 0 0.03" rpy="0 0 0"/>
      <geometry><sphere radius="0.03"/></geometry>
    </collision>
  </link>
  <joint name="caster_joint" type="fixed">
    <origin xyz="-0.25 0 0.03" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="caster_link"/>
  </joint>

  <!-- ===== Raised platform (fixed/static to robot) ===== -->
  <!-- This replaces any previous 'lift' joint: we fix it and lift by +Z -->
  <link name="platform_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="3.0"/>
      <inertia ixx="0.05" ixy="0.0" ixz="0.0" iyy="0.05" iyz="0.0" izz="0.05"/>
    </inertial>
    <visual>
      <!-- Adjust scale and origin to fit your mesh -->
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <mesh filename="model://ackermann_logistic_robot/meshes/platform.dae" scale="1 1 1"/>
      </geometry>
      <material name="Blue"/>
    </visual>
    <collision>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <geometry>
        <!-- If you have a collision mesh, use it here; otherwise approximate -->
        <box size="0.6 0.45 0.05"/>
      </geometry>
    </collision>
  </link>

  <joint name="platform_fixed_joint" type="fixed">
    <!-- Raise the platform a little on +Z so LiDAR can sit in the middle -->
    <!-- TUNE THIS HEIGHT: 0.20 means 20 cm above base_link -->
    <origin xyz="0 0 0.20" rpy="0 0 0"/>
    <parent link="base_link"/>
    <child link="platform_link"/>
  </joint>

  <!-- ===== LiDAR mount placeholder (center of platform) ===== -->
  <!-- You can attach your lidar sensor/plugin to this link later -->
  <link name="lidar_mount_link">
    <inertial>
      <origin xyz="0 0 0" rpy="0 0 0"/>
      <mass value="0.1"/>
      <inertia ixx="1e-4" ixy="0.0" ixz="0.0" iyy="1e-4" iyz="0.0" izz="1e-4"/>
    </inertial>
    <visual>
      <!-- Small post to visualize mount -->
      <origin xyz="0 0 0.02" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.025" length="0.04"/>
      </geometry>
      <material name="Black"/>
    </visual>
    <collision>
      <origin xyz="0 0 0.02" rpy="0 0 0"/>
      <geometry>
        <cylinder radius="0.025" length="0.04"/>
      </geometry>
    </collision>
  </link>

  <joint name="lidar_mount_fixed" type="fixed">
    <!-- Put it at the center of platform_link top surface -->
    <origin xyz="0 0 0.03" rpy="0 0 0"/>
    <parent link="platform_link"/>
    <child link="lidar_mount_link"/>
  </joint>

  <!-- ===== Gazebo Classic plugins & properties ===== -->
  <!-- Differential drive plugin (ROS 2) -->
  <gazebo>
    <plugin name="diff_drive" filename="libgazebo_ros_diff_drive.so">
      <ros>
        <namespace>/</namespace>
        <remapping>cmd_vel:=cmd_vel</remapping>
        <remapping>odom:=odom</remapping>
      </ros>
      <update_rate>100.0</update_rate>

      <left_joint>left_wheel_joint</left_joint>
      <right_joint>right_wheel_joint</right_joint>

      <!-- Match these to your joint origins above -->
      <wheel_separation>0.40</wheel_separation>
      <wheel_radius>0.06</wheel_radius>

      <odom_publisher>true</odom_publisher>
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>

      <cmd_vel_timeout>0.5</cmd_vel_timeout>
      <always_on>true</always_on>
      <legacy_mode>false</legacy_mode>
    </plugin>
  </gazebo>

  <!-- Tweak friction/contacts for wheels -->
  <gazebo reference="left_wheel_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>1e5</kp>
    <kd>1.0</kd>
    <fdir1>1 0 0</fdir1>
  </gazebo>
  <gazebo reference="right_wheel_link">
    <mu1>1.0</mu1>
    <mu2>1.0</mu2>
    <kp>1e5</kp>
    <kd>1.0</kd>
    <fdir1>1 0 0</fdir1>
  </gazebo>

  <!-- Optional visual tweaks -->
  <gazebo reference="platform_link">
    <material>Gazebo/Blue</material>
  </gazebo>
  <gazebo reference="base_link">
    <material>Gazebo/Grey</material>
  </gazebo>

  <!-- ===== (Optional) LiDAR sensor example (commented). Uncomment to use. =====
  <gazebo reference="lidar_mount_link">
    <sensor name="lidar" type="ray">
      <always_on>true</always_on>
      <visualize>true</visualize>
      <update_rate>20</update_rate>
      <ray>
        <scan>
          <horizontal>
            <samples>720</samples>
            <resolution>1</resolution>
            <min_angle>-3.14159</min_angle>
            <max_angle> 3.14159</max_angle>
          </horizontal>
        </scan>
        <range>
          <min>0.12</min>
          <max>30.0</max>
          <resolution>0.01</resolution>
        </range>
      </ray>
      <plugin name="lidar_plugin" filename="libgazebo_ros_ray_sensor.so">
        <ros>
          <namespace>/</namespace>
          <remapping>~/out:=scan</remapping>
        </ros>
        <frame_name>lidar_mount_link</frame_name>
      </plugin>
    </sensor>
  </gazebo>
  ===== -->

</robot>
